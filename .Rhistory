library(bs4Dash)
if (interactive()) {
bs4DashGallery()
}
bs4DashGallery()
library(tidyverse)
library(lme4)
library(zoo)
df_raw = readRDS('../data/dados_mensais.rds')
modelo = readRDS('data_model/modelo_log.rds')
df = df_raw |>
group_by(estado, cnpj_do_pdv) |>
mutate(
visitas_planejadas_avg = mean(visitas_planejadas, na.rm=TRUE),
) |>
ungroup() |>
mutate(
regiao = case_when(
estado %in% c("Alagoas","Bahia","Ceará","Maranhão","Paraíba","Pernambuco","Piauí","Rio Grande do Norte","Sergipe") ~ 'Nordeste',
estado %in% c("Amapá","Amazonas","Pará","Roraima","Tocantins") ~ 'Norte',
estado %in% c("Distrito Federal","Goiás","Mato Grosso","Mato Grosso do Sul") ~ 'Centro-Oeste',
estado %in% c("Espírito Santo","Minas Gerais","Rio de Janeiro","São Paulo") ~ 'Sudeste',
estado %in% c("Paraná","Rio Grande do Sul","Santa Catarina") ~ 'Sul'
) |> factor(),
grupo_regiao = case_when(
estado %in% c("Espírito Santo","Rio de Janeiro") ~ "ES+RJ",
estado %in% c("Minas Gerais") ~ "MG",
regiao == 'Sul' ~ "SUL",
regiao == 'Nordeste' ~ "NE",
regiao %in% c('Norte','Centro-Oeste') ~ 'NO+CO',
regional %in% c('SPI') ~ 'SPI',
regional %in% c('ZNORTE SP','ZSUL SP','ZOESTE SP','SPC') ~ 'SPC',
TRUE ~ 'SPC'
) |> factor(),
periodo_cat = case_when(
is.na(visitas_planejadas_avg) ~ 'Sem visita',
visitas_planejadas_avg < 3 ~ 'Quinzenal',
visitas_planejadas_avg >=3 & visitas_planejadas_avg <= 5 ~ 'Semanal',
visitas_planejadas_avg > 5 ~ 'Diário'
) |> factor(),
segmento = case_when(
str_detect(canal_pdv, 'Farma') ~ 'Farma',
canal_pdv == 'Departamento' ~ 'Lj Dpto',
TRUE ~ canal_pdv
) |> factor(),
perfil_cat = case_when(
perfil_de_acesso == 'Promotor(a) - Terceirizado' ~ 'Promotor(a) - Terceiros',
TRUE ~ perfil_de_acesso
),
mes_cat = str_extract(mes, "^[A-Za-z]+") |> str_to_lower(),
saz = paste0(mes_cat, "_" , grupo_regiao),
grp_seg_perfil_reg = paste0(segmento, "_", perfil_cat, "_", grupo_regiao)
)
fixef_base = fixef(modelo)
ranef_base = coef(modelo)
# VISIT
coef_base_visit = ranef_base$CNPJ |>
rownames_to_column(var = "cnpj_do_pdv") |>
select(
cnpj_do_pdv,
model1_num_visita = `log(num_visita_no_mes + 1)`,
)
df_modelagem = df |>
select(
cnpj_do_pdv,
saz,
mes,
grupo_regiao,
estado,
colaborador,
perfil_de_acesso,
segmento,
tipo_planejamento = periodo_cat,
visitas_realizadas = visitou,
faturamento_no_pdv,
custo_colab,
grp_seg_perfil_reg
) |>
group_by(
cnpj_do_pdv, colaborador
) |>
mutate(
media_fat_l3m = rollmeanr(
faturamento_no_pdv,
k = 3,
fill = NA,
align = "right"
),
media_visitas_realizadas_l3m = rollmeanr(
visitas_realizadas,
k = 3,
fill = NA,
align = "right"
)
) |>
ungroup() |>
filter(
mes == 'Dez-24'
) |>
## FIXED COEF
mutate(
## MODEL BASE
model1_segmento = case_when(
segmento == 'Farma' ~ 0,
segmento == 'Perfumaria' ~ fixef_base[['Segmentacao_pdvPerfumaria']],
segmento == 'Alimentar' ~ fixef_base[['Segmentacao_pdvAlimentar']],
segmento == 'Lj Dpto' ~ fixef_base[['Segmentacao_pdvLj Dpto']]
),
model1_perfil = case_when(
perfil_de_acesso == 'Promotor(a) - GB' ~ 0,
perfil_de_acesso == 'Promotor(a) - Terceirizado' ~ fixef_base[['perfil_de_acessoPromotor(a) - Terceiros']],
perfil_de_acesso == 'Ativador(a)' ~ fixef_base[['perfil_de_acessoAtivador(a)']],
perfil_de_acesso == 'Consultor(a)' ~ fixef_base[['perfil_de_acessoConsultor(a)']],
),
model1_planejamento = case_when(
tipo_planejamento == 'Sem visita' ~ 0,
tipo_planejamento == 'Diário' ~ fixef_base[['visitas_planejadas_catDiário']],
tipo_planejamento == 'Semanal' ~ fixef_base[['visitas_planejadas_catSemanal']],
tipo_planejamento == 'Quinzenal' ~ fixef_base[['visitas_planejadas_catQuinzenal']]
)
) |>
## RANDOM COEF
left_join(coef_base_visit, by = 'cnpj_do_pdv') |>
## NAs IMPUTACAO
mutate(model1_num_visita = ifelse(
is.na(model1_num_visita),
mean(model1_num_visita, na.rm = TRUE),
model1_num_visita)
) |>
mutate(across(c(model1_num_visita), ~ ifelse(. < 0, 0, .))) |>
## VALOR COLAB
mutate(
impacto = exp(model1_num_visita) - 1,
impacto_visita = exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1,
valor_colab = (exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1) * media_fat_l3m
) |>
## VALOR VISITA
mutate(
valor_visita = media_fat_l3m*impacto
) |>
## TRATAMENTOS PARA O SHINY
mutate(
segmento = case_when(
segmento == 'Lj Dpto' ~ 'Departamento',
TRUE ~ segmento
) |> factor(),
grupo_regiao = case_when(
grupo_regiao == 'ES+RJ' ~ "ES/RJ",
grupo_regiao == 'NO+CO' ~ 'NO/CO',
TRUE ~ grupo_regiao
) |> factor()
) |>
filter(
tipo_planejamento != 'Sem visita'
)
saveRDS(df_modelagem, '../shiny/data/dados_modelo.rds')
df_modelagem = df |>
select(
cnpj_do_pdv,
saz,
mes,
grupo_regiao,
estado,
colaborador,
perfil_de_acesso,
segmento,
tipo_planejamento = periodo_cat,
visitas_realizadas = visitou,
faturamento_no_pdv,
custo_colab,
grp_seg_perfil_reg
) |>
group_by(
cnpj_do_pdv, colaborador
) |>
mutate(
media_fat_l3m = rollmeanr(
faturamento_no_pdv,
k = 3,
fill = NA,
align = "right"
),
media_visitas_realizadas_l3m = rollmeanr(
visitas_realizadas,
k = 3,
fill = NA,
align = "right"
)
) |>
ungroup() |>
filter(
mes == 'Dez-24'
) |>
## FIXED COEF
mutate(
## MODEL BASE
model1_segmento = case_when(
segmento == 'Farma' ~ 0,
segmento == 'Perfumaria' ~ fixef_base[['Segmentacao_pdvPerfumaria']],
segmento == 'Alimentar' ~ fixef_base[['Segmentacao_pdvAlimentar']],
segmento == 'Lj Dpto' ~ fixef_base[['Segmentacao_pdvLj Dpto']]
),
model1_perfil = case_when(
perfil_de_acesso == 'Promotor(a) - GB' ~ 0,
perfil_de_acesso == 'Promotor(a) - Terceirizado' ~ fixef_base[['perfil_de_acessoPromotor(a) - Terceiros']],
perfil_de_acesso == 'Ativador(a)' ~ fixef_base[['perfil_de_acessoAtivador(a)']],
perfil_de_acesso == 'Consultor(a)' ~ fixef_base[['perfil_de_acessoConsultor(a)']],
),
model1_planejamento = case_when(
tipo_planejamento == 'Sem visita' ~ 0,
tipo_planejamento == 'Diário' ~ fixef_base[['visitas_planejadas_catDiário']],
tipo_planejamento == 'Semanal' ~ fixef_base[['visitas_planejadas_catSemanal']],
tipo_planejamento == 'Quinzenal' ~ fixef_base[['visitas_planejadas_catQuinzenal']]
)
) |>
## RANDOM COEF
left_join(coef_base_visit, by = 'cnpj_do_pdv') |>
## NAs IMPUTACAO
mutate(model1_num_visita = ifelse(
is.na(model1_num_visita),
mean(model1_num_visita, na.rm = TRUE),
model1_num_visita)
) |>
mutate(across(c(model1_num_visita), ~ ifelse(. < 0, 0, .))) |>
## VALOR COLAB
mutate(
impacto = exp(model1_num_visita) - 1,
impacto_visita = exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1,
valor_colab = (exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1) * media_fat_l3m
) |>
## VALOR VISITA
mutate(
valor_visita = media_fat_l3m*impacto
) |>
## TRATAMENTOS PARA O SHINY
mutate(
segmento = case_when(
segmento == 'Lj Dpto' ~ 'Departamento',
TRUE ~ segmento
) |> factor(),
grupo_regiao = case_when(
grupo_regiao == 'ES+RJ' ~ "ES/RJ",
grupo_regiao == 'NO+CO' ~ 'NO/CO',
TRUE ~ grupo_regiao
) |> factor()
) |>
filter(
tipo_planejamento != 'Sem visita'
)
saveRDS(df_modelagem, 'data/dados_modelo.rds')
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(FootStats)
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
premier_league_raw = FootStats::load_data('england', 'premier_league')
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(FootStats)
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
#premier_league_raw = FootStats::load_data('england', 'premier_league')
brasileirao_a = brasileirao_a_raw %>%
filter(venue == 'Home')
premier_league = premier_league_raw %>%
filter(venue == 'Home')
brasileirao_a = brasileirao_a_raw %>%
filter(venue == 'Home')
# premier_league = premier_league_raw %>%
#   filter(venue == 'Home')
#BRASILEIRAO
br_train_test = FootStats::split_train_test(brasileirao_a_raw, '2024', 35)
br_train = br_train_test$train
br_test = br_train_test$test
br = rbind(br_train, br_test)
#PREMIER LEAGUE
pl_train_test = FootStats::split_train_test(premier_league_raw, '2023', 35)
#BRASILEIRAO
br_train_test = FootStats::split_train_test(brasileirao_a_raw, '2024', 35)
br_train = br_train_test$train
br_test = br_train_test$test
br = rbind(br_train, br_test)
#PREMIER LEAGUE
# pl_train_test = FootStats::split_train_test(premier_league_raw, '2023', 35)
#
# pl_train = pl_train_test$train
# pl_test = pl_train_test$test
#
# pl = rbind(br_train, br_test)
#BRASILEIRAO
data_br = list(
#treino
nteams = length(unique(br_train$team_name_idx)),
ngames = nrow(br_train),
team1 = br_train$team_name_idx,
team2 = br_train$opponent_idx,
gf = br_train$gf,
ga = br_train$ga,
#test
ngames_new = nrow(br_test),
team1_new = br_test$team_name_idx,
team2_new = br_test$opponent_idx
)
#PREMIER LEAGUE
data_pl = list(
#treino
nteams = length(unique(pl_train$team_name_idx)),
ngames = nrow(pl_train),
team1 = pl_train$team_name_idx,
team2 = pl_train$opponent_idx,
gf = as.integer(pl_train$gf),
ga = as.integer(pl_train$ga),
#test
ngames_new = nrow(pl_test),
team1_new = pl_test$team_name_idx,
team2_new = pl_test$opponent_idx
)
View(data_br)
View(br)
View(br_train)
#BRASILEIRAO
data_br = list(
#treino
nteams = length(unique(br_train$team_name_idx)),
ngames = nrow(br_train),
team1 = br_train$team_name_idx,
team2 = br_train$opponent_idx,
gf = br_train$gf,
ga = br_train$ga,
#test
ngames_new = nrow(br_test),
team1_new = br_test$team_name_idx,
team2_new = br_test$opponent_idx
)
#PREMIER LEAGUE
# data_pl = list(
#   #treino
#   nteams = length(unique(pl_train$team_name_idx)),
#   ngames = nrow(pl_train),
#   team1 = pl_train$team_name_idx,
#   team2 = pl_train$opponent_idx,
#   gf = as.integer(pl_train$gf),
#   ga = as.integer(pl_train$ga),
#   #test
#   ngames_new = nrow(pl_test),
#   team1_new = pl_test$team_name_idx,
#   team2_new = pl_test$opponent_idx
# )
iter = 2500
warmup = 2500
chains = 4
cores = 8
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
install.packages("shinystan")
library("shinystan")
launch_shinystan(fit_indep_pois)
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
library("shinystan")
launch_shinystan(fit_indep_pois)
y1_rep = fit1$draws("gf_new")
View(br)
setwd("~/")
setwd("C:\Users\salvv\OneDrive\Desktop\Futebol\FootStat")
setwd("C:/Users/salvv/OneDrive/Desktop/Futebol/FootStat")
library(devtools)
load_all()
test()
load_all()
document()
check()
load_all()
document()
check()
load_all()
document()
load_all()
check()
