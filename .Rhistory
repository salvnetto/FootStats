model1_planejamento = case_when(
tipo_planejamento == 'Sem visita' ~ 0,
tipo_planejamento == 'Di치rio' ~ fixef_base[['visitas_planejadas_catDi치rio']],
tipo_planejamento == 'Semanal' ~ fixef_base[['visitas_planejadas_catSemanal']],
tipo_planejamento == 'Quinzenal' ~ fixef_base[['visitas_planejadas_catQuinzenal']]
)
) |>
## RANDOM COEF
left_join(coef_base_visit, by = 'cnpj_do_pdv') |>
## NAs IMPUTACAO
mutate(model1_num_visita = ifelse(
is.na(model1_num_visita),
mean(model1_num_visita, na.rm = TRUE),
model1_num_visita)
) |>
mutate(across(c(model1_num_visita), ~ ifelse(. < 0, 0, .))) |>
## VALOR COLAB
mutate(
impacto = exp(model1_num_visita) - 1,
impacto_visita = exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1,
valor_colab = (exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1) * media_fat_l3m
) |>
## VALOR VISITA
mutate(
valor_visita = media_fat_l3m*impacto
) |>
## TRATAMENTOS PARA O SHINY
mutate(
segmento = case_when(
segmento == 'Lj Dpto' ~ 'Departamento',
TRUE ~ segmento
) |> factor(),
grupo_regiao = case_when(
grupo_regiao == 'ES+RJ' ~ "ES/RJ",
grupo_regiao == 'NO+CO' ~ 'NO/CO',
TRUE ~ grupo_regiao
) |> factor()
) |>
filter(
tipo_planejamento != 'Sem visita'
)
saveRDS(df_modelagem, '../shiny/data/dados_modelo.rds')
df_modelagem = df |>
select(
cnpj_do_pdv,
saz,
mes,
grupo_regiao,
estado,
colaborador,
perfil_de_acesso,
segmento,
tipo_planejamento = periodo_cat,
visitas_realizadas = visitou,
faturamento_no_pdv,
custo_colab,
grp_seg_perfil_reg
) |>
group_by(
cnpj_do_pdv, colaborador
) |>
mutate(
media_fat_l3m = rollmeanr(
faturamento_no_pdv,
k = 3,
fill = NA,
align = "right"
),
media_visitas_realizadas_l3m = rollmeanr(
visitas_realizadas,
k = 3,
fill = NA,
align = "right"
)
) |>
ungroup() |>
filter(
mes == 'Dez-24'
) |>
## FIXED COEF
mutate(
## MODEL BASE
model1_segmento = case_when(
segmento == 'Farma' ~ 0,
segmento == 'Perfumaria' ~ fixef_base[['Segmentacao_pdvPerfumaria']],
segmento == 'Alimentar' ~ fixef_base[['Segmentacao_pdvAlimentar']],
segmento == 'Lj Dpto' ~ fixef_base[['Segmentacao_pdvLj Dpto']]
),
model1_perfil = case_when(
perfil_de_acesso == 'Promotor(a) - GB' ~ 0,
perfil_de_acesso == 'Promotor(a) - Terceirizado' ~ fixef_base[['perfil_de_acessoPromotor(a) - Terceiros']],
perfil_de_acesso == 'Ativador(a)' ~ fixef_base[['perfil_de_acessoAtivador(a)']],
perfil_de_acesso == 'Consultor(a)' ~ fixef_base[['perfil_de_acessoConsultor(a)']],
),
model1_planejamento = case_when(
tipo_planejamento == 'Sem visita' ~ 0,
tipo_planejamento == 'Di치rio' ~ fixef_base[['visitas_planejadas_catDi치rio']],
tipo_planejamento == 'Semanal' ~ fixef_base[['visitas_planejadas_catSemanal']],
tipo_planejamento == 'Quinzenal' ~ fixef_base[['visitas_planejadas_catQuinzenal']]
)
) |>
## RANDOM COEF
left_join(coef_base_visit, by = 'cnpj_do_pdv') |>
## NAs IMPUTACAO
mutate(model1_num_visita = ifelse(
is.na(model1_num_visita),
mean(model1_num_visita, na.rm = TRUE),
model1_num_visita)
) |>
mutate(across(c(model1_num_visita), ~ ifelse(. < 0, 0, .))) |>
## VALOR COLAB
mutate(
impacto = exp(model1_num_visita) - 1,
impacto_visita = exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1,
valor_colab = (exp(model1_num_visita*log(media_visitas_realizadas_l3m)) - 1) * media_fat_l3m
) |>
## VALOR VISITA
mutate(
valor_visita = media_fat_l3m*impacto
) |>
## TRATAMENTOS PARA O SHINY
mutate(
segmento = case_when(
segmento == 'Lj Dpto' ~ 'Departamento',
TRUE ~ segmento
) |> factor(),
grupo_regiao = case_when(
grupo_regiao == 'ES+RJ' ~ "ES/RJ",
grupo_regiao == 'NO+CO' ~ 'NO/CO',
TRUE ~ grupo_regiao
) |> factor()
) |>
filter(
tipo_planejamento != 'Sem visita'
)
saveRDS(df_modelagem, 'data/dados_modelo.rds')
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(FootStats)
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
premier_league_raw = FootStats::load_data('england', 'premier_league')
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(FootStats)
brasileirao_a_raw = FootStats::load_data('brazil', 'brasileirao_a')
#premier_league_raw = FootStats::load_data('england', 'premier_league')
brasileirao_a = brasileirao_a_raw %>%
filter(venue == 'Home')
premier_league = premier_league_raw %>%
filter(venue == 'Home')
brasileirao_a = brasileirao_a_raw %>%
filter(venue == 'Home')
# premier_league = premier_league_raw %>%
#   filter(venue == 'Home')
#BRASILEIRAO
br_train_test = FootStats::split_train_test(brasileirao_a_raw, '2024', 35)
br_train = br_train_test$train
br_test = br_train_test$test
br = rbind(br_train, br_test)
#PREMIER LEAGUE
pl_train_test = FootStats::split_train_test(premier_league_raw, '2023', 35)
#BRASILEIRAO
br_train_test = FootStats::split_train_test(brasileirao_a_raw, '2024', 35)
br_train = br_train_test$train
br_test = br_train_test$test
br = rbind(br_train, br_test)
#PREMIER LEAGUE
# pl_train_test = FootStats::split_train_test(premier_league_raw, '2023', 35)
#
# pl_train = pl_train_test$train
# pl_test = pl_train_test$test
#
# pl = rbind(br_train, br_test)
#BRASILEIRAO
data_br = list(
#treino
nteams = length(unique(br_train$team_name_idx)),
ngames = nrow(br_train),
team1 = br_train$team_name_idx,
team2 = br_train$opponent_idx,
gf = br_train$gf,
ga = br_train$ga,
#test
ngames_new = nrow(br_test),
team1_new = br_test$team_name_idx,
team2_new = br_test$opponent_idx
)
#PREMIER LEAGUE
data_pl = list(
#treino
nteams = length(unique(pl_train$team_name_idx)),
ngames = nrow(pl_train),
team1 = pl_train$team_name_idx,
team2 = pl_train$opponent_idx,
gf = as.integer(pl_train$gf),
ga = as.integer(pl_train$ga),
#test
ngames_new = nrow(pl_test),
team1_new = pl_test$team_name_idx,
team2_new = pl_test$opponent_idx
)
View(data_br)
View(br)
View(br_train)
#BRASILEIRAO
data_br = list(
#treino
nteams = length(unique(br_train$team_name_idx)),
ngames = nrow(br_train),
team1 = br_train$team_name_idx,
team2 = br_train$opponent_idx,
gf = br_train$gf,
ga = br_train$ga,
#test
ngames_new = nrow(br_test),
team1_new = br_test$team_name_idx,
team2_new = br_test$opponent_idx
)
#PREMIER LEAGUE
# data_pl = list(
#   #treino
#   nteams = length(unique(pl_train$team_name_idx)),
#   ngames = nrow(pl_train),
#   team1 = pl_train$team_name_idx,
#   team2 = pl_train$opponent_idx,
#   gf = as.integer(pl_train$gf),
#   ga = as.integer(pl_train$ga),
#   #test
#   ngames_new = nrow(pl_test),
#   team1_new = pl_test$team_name_idx,
#   team2_new = pl_test$opponent_idx
# )
iter = 2500
warmup = 2500
chains = 4
cores = 8
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
install.packages("shinystan")
library("shinystan")
launch_shinystan(fit_indep_pois)
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
indep_pois = cmdstan_model("models/1_indep_poisson.stan")
fit_indep_pois = indep_pois$sample(
data = data_br,
iter_sampling = iter,
iter_warmup = warmup,
chains = chains,
parallel_chains = cores,
#max_treedepth = 15,
)
fit_indep_pois$save_object(file = "results/1_indep_poisson(br).rds")
library("shinystan")
launch_shinystan(fit_indep_pois)
y1_rep = fit1$draws("gf_new")
View(br)
setwd("~/Futebol/FootStat")
load_all()
library(devtools)
load_all()
load_all()
document()
check()
check()
load_all()
document()
check()
load_all()
document()
check()
load_all()
document()
check()
load_all()
document()
check()
document()
load_all()
check()
load_all()
document()
check()
renv::init()
renv::snapshot()
library(devtools)
renv::install("devtools")
library(devtools)
load_all()
document()
load_all()
document()
load_all()
document()
check()
test_data <- data.frame(
result = c("W", "D", "L", "W", "L"),
home_win = c(0.7, 0.2, 0.3, 0.6, 0.4),
home_lost = c(0.2, 0.3, 0.6, 0.3, 0.5),
draw = c(0.1, 0.5, 0.1, 0.1, 0.1)
)
confusion_matrix(test_data)
confusion_matrix(test_data, "binary")
load_all()
confusion_matrix(test_data, "binary")
confusion_matrix(test_data, "binary")
caret::confusionMatrix(test_data)
View(test_data)
test_data = test_data |> dplyr::mutate(
preview = dplyr::case_when(
home_win > draw & home_win > home_lost ~ "W",
TRUE ~ "DL"
) |> factor(),
result = ifelse(result == "W", "W", "DL") |> factor()
) |>
dplyr::select(result, preview)
View(test_data)
caret::confusionMatrix(test_data)
caret::confusionMatrix(test_data$result, test_data$preview)
?caret::confusionMatrix
caret::confusionMatrix(test_data, "result")
load_all()
document()
check()
load_all()
document()
check()
load_all()
document()
document()
check()
load_all()
check()
document()
load_all()
document()
?rnorm
#' \dontrun{
#' generate_qmd(
#'   model = "indep_poisson(pl)",
#'   title = "Poisson Premier League",
#'   param_list = c("beta_0", "home", "sd_att", "sd_def", "mu_att", "beta"),
#'   output_path = "relatorios/indep_poisson(pl).qmd"
#' )
#' }
#'
#' @export
generate_qmd <- function(model, title, param_list, output_path) {
fit_path <- glue::glue("../results/{model}.rds")
df_path <- glue::glue("../data/{model}.xlsx")
output_path <- glue::glue(output_path)
qmd_content <- glue::glue("
---
title: \"{title}\"
format:
html:
embed-resources: true
---
```{{r setup}}
#| output: false
#| echo: false
#| warning: false
library(tidyverse)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(shinystan)
library(FootStats)
library(readxl)
```
```{{r}}
#| output: false
#| echo: false
#| warning: false
fit = readRDS(\"{fit_path}\")
draws = posterior::as_draws_rvars(fit$draws())
df = read_excel(\"{df_path}\")
```
```{{r}}
fit$summary(list({paste(shQuote(param_list, type='cmd'), collapse=', ')}))
```
# Convergencia
```{{r traceplot}}
#| output: true
#| echo: false
#| warning: false
#ataque
att1 = mcmc_trace(draws, pars = c('att[1]'))
att2 = mcmc_trace(draws, pars = c('att[7]'))
att3 = mcmc_trace(draws, pars = c('att[12]'))
att4 = mcmc_trace(draws, pars = c('att[20]'))
bayesplot_grid(plots = list(att1, att2, att3, att4))
#defesa
def1 = mcmc_trace(draws, pars = c('def[1]'))
def2 = mcmc_trace(draws, pars = c('def[7]'))
def3 = mcmc_trace(draws, pars = c('def[12]'))
def4 = mcmc_trace(draws, pars = c('def[20]'))
bayesplot_grid(plots = list(def1, def2, def3, def4))
#outros
plots_list <- list({paste0('mcmc_trace(draws, pars = c(\"', param_list, '\"))', collapse=', ')})
bayesplot_grid(plots = plots_list)
```
```{{r rhat and neff}}
#| output: true
#| echo: false
#| warning: false
#extract
rhats = bayesplot::rhat(fit)
ratios_cp = neff_ratio(fit)
#plot
prhat = mcmc_rhat_hist(rhats)
pnepp = mcmc_neff_hist(ratios_cp)
bayesplot_grid(plots = list(prhat, pnepp))
```
```{{r acf}}
#| output: true
#| echo: false
#| warning: false
#ataque
att1 = mcmc_acf(draws, pars = c('att[1]'))
att2 = mcmc_acf(draws, pars = c('att[7]'))
att3 = mcmc_acf(draws, pars = c('att[12]'))
att4 = mcmc_acf(draws, pars = c('att[20]'))
bayesplot_grid(plots = list(att1, att2, att3, att4))
#defesa
def1 = mcmc_acf(draws, pars = c('def[1]'))
def2 = mcmc_acf(draws, pars = c('def[7]'))
def3 = mcmc_acf(draws, pars = c('def[12]'))
def4 = mcmc_acf(draws, pars = c('def[20]'))
bayesplot_grid(plots = list(def1, def2, def3, def4))
#outros
acf_plots <- list({paste0('mcmc_acf(draws, pars = c(\"', param_list, '\"))', collapse=', ')})
bayesplot_grid(plots = acf_plots)
```
# Metricas
```{{r}}
#| output: true
#| echo: true
#| warning: false
FootStats::score(df)
FootStats::expected_results(df)
FootStats::expected_results(df, favorite = 'home')
FootStats::expected_results(df, favorite = 'away')
FootStats::real_vs_preview_goals(df)
FootStats::confusion_matrix(df, type = \"binary\")
FootStats::confusion_matrix(df, type = \"three-class\")
```
```{{r}}
#| output: true
#| echo: false
#| warning: false
FootStats::plots(draws, df)
```
")
writeLines(qmd_content, output_path)
message("Quarto file saved to: ", output_path)
}
generate_qmd("teste", "teste1", c(), "")
X = matrix(rgamma(length(games)*2, scale = 1, shape = 1), length(games), 2)
rgamma(length(10)*2, scale = 1, shape = 1)
rgamma(10*2, scale = 1, shape = 1)
matrix(rgamma(length(10000)*2, scale = 1, shape = 1), length(10000), 2)
matrix(rgamma(10*2, scale = 1, shape = 1), 10, 2)
library(devtools)
load_all()
document()
rm(list = c("generate_qmd"))
load_all()
document()
check()
document()
check()
check()
check()
Rdata <- readRDS("C:/Users/salvv/OneDrive/Documentos/Futebol/soccerstan/data/Rdata.rds")
View(Rdata)
source("~/Futebol/machine_learning/tidymodels.r", echo=TRUE)
library(devtools)
load_all()
document()
check()
load_all()
check()
